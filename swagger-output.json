{
  "swagger": "2.0",
  "info": {
    "title": "API Documentation",
    "description": "Calendar API",
    "version": "1.0.0"
  },
  "host": "event-planner-nkma.onrender.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "GoogleOAuth2": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://event-planner-nkma.onrender.com/auth/google",
      "description": "Use Google OAuth2 to authenticate <b>Exchange the hidden GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET for JWT_Token.</b>"
    }
  },
  "paths": {
    "/auth/logout": {
      "post": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "GETS all the users",
        "description": "All users are displayed.",
        "responses": {
          "200": {
            "description": "SUCCESS, GET retrieved all users"
          },
          "404": {
            "description": "The attempted GET of all users was Not Found"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to GET all users"
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "summary": "GETS a user by their _id",
        "description": "The selected user is displayed.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The MongoDB ObjectId for USER under the '_id' label."
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS, GET Retrieved the selected user"
          },
          "404": {
            "description": "The attempted GET of the selected user was Not Found"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the _id PARAMETER"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to GET the selected user"
          }
        }
      },
      "put": {
        "summary": "UPDATES a user that has been selected by _id with any new data entered ---------- (!!!OAUTH PROTECTED ROUTE!!!)",
        "description": "The changed data for the user updates the database",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The MongoDB ObjectId for USER under the '_id' label."
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "JWT token with Bearer prefix",
            "type": "string",
            "required": true,
            "default": "Bearer "
          },
          {
            "name": "body",
            "in": "body",
            "description": "Fields to update",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Updated Name"
                },
                "email": {
                  "type": "string",
                  "example": "Updated@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "P@ssw0rd123"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "SUCCESS (with no content returned), PUT   the selected user in the database"
          },
          "400": {
            "description": "BAD REQUEST your PUT was attempted with forbidden entries"
          },
          "404": {
            "description": "The attempted PUT of the specified user for updating was Not Found"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the user data"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to PUT the data change"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "DELETES a user by its _id ---------- (!!!OAUTH PROTECTED ROUTE!!!)",
        "description": "With deletion it",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The MongoDB ObjectId for USER under the '_id' label."
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "JWT token with Bearer prefix",
            "type": "string",
            "required": true,
            "default": "Bearer "
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS, the user was DELETED"
          },
          "404": {
            "description": "The selected user for DELETION was NOT FOUND"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the _id PARAMETER"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to DELETE the user"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user": {
      "post": {
        "summary": "POSTS input to create a new user ---------- (!!!OAUTH PROTECTED ROUTE!!!)",
        "description": "The entered user information is added to the database.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "JWT token with Bearer prefix",
            "type": "string",
            "required": true,
            "default": "Bearer "
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "example": "any"
                },
                "email": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                }
              }
            },
            "description": "Fields to update",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "SUCCESS, POST   a new user"
          },
          "400": {
            "description": "BAD REQUEST your POST was attempted with forbidden entries"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the user data"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to POST the selected user"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/events/": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "example": "any"
                },
                "description": {
                  "example": "any"
                },
                "date": {
                  "example": "any"
                },
                "location": {
                  "example": "any"
                },
                "userId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Fields to update",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "any"
                },
                "description": {
                  "type": "string",
                  "example": "any"
                },
                "date": {
                  "type": "Date",
                  "example": "YYYY-MM-DDT00:00:00.000Z"
                },
                "location": {
                  "type": "string",
                  "example": "any"
                },
                "userId": {
                  "type": "mongoose.Schema.Types.ObjectId",
                  "example": "any"
                }
              },
              "required": "email"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/goals": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "example": "any"
                },
                "name": {
                  "example": "any"
                },
                "description": {
                  "example": "any"
                },
                "dueDate": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/goals/{goalId}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "example": "any"
                },
                "description": {
                  "example": "any"
                },
                "dueDate": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/goals/user/{userId}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/classes": {
      "post": {
        "summary": "Creates a class",
        "description": "Saves a new class into the database.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Web Services"
                },
                "teacher": {
                  "type": "string",
                  "example": "Mr. FakeTeacher"
                },
                "userId": {
                  "type": "string",
                  "example": "55532c284e8d64fbf0ea178f"
                },
                "startTime": {
                  "type": "date",
                  "example": "1970-01-01T09:00"
                },
                "length": {
                  "type": "number",
                  "example": 90
                },
                "days": {
                  "type": "array",
                  "example": [
                    1,
                    3,
                    5
                  ]
                }
              },
              "required": "userId"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "SUCCESS, POST   a new class"
          },
          "400": {
            "description": "BAD REQUEST your POST was attempted with forbidden entries"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the user data"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to POST the selected class"
          }
        }
      }
    },
    "/classes/createWithArray": {
      "post": {
        "summary": "Creates multiple classes",
        "description": "Saves new classes into the database.",
        "parameters": [
          {
            "name": "reqBody",
            "in": "body",
            "description": "request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "201": {
            "description": "SUCCESS, POST created new classes"
          },
          "400": {
            "description": "BAD REQUEST your POST was attempted with forbidden entries"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the user data"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to POST the selected classes"
          }
        }
      }
    },
    "/classes/{classId}": {
      "get": {
        "summary": "GETS a class by its _id",
        "description": "The selected class is displayed.",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS, GET Retrieved the selected class"
          },
          "404": {
            "description": "The attempted GET of the selected class was Not Found"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the _id PARAMETER"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to GET the selected class"
          }
        }
      },
      "put": {
        "summary": "UPDATES a class that has been selected by _id with any new data entered",
        "description": "The changed data for the user updates the database",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "reqBody",
            "in": "body",
            "description": "request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Web Services"
                },
                "teacher": {
                  "type": "string",
                  "example": "Mr. FakeTeacher"
                },
                "userId": {
                  "type": "string",
                  "example": "55532c284e8d64fbf0ea178f"
                },
                "startTime": {
                  "type": "date",
                  "example": "1970-01-01T09:00"
                },
                "length": {
                  "type": "number",
                  "example": 90
                },
                "days": {
                  "type": "array",
                  "example": [
                    1,
                    3,
                    5
                  ]
                }
              },
              "required": "userId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "SUCCESS (with no content returned), PUT   the selected class in the database"
          },
          "400": {
            "description": "BAD REQUEST your PUT was attempted with forbidden entries"
          },
          "404": {
            "description": "The attempted PUT of the specified class for updating was Not Found"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the class data"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to PUT the data change"
          }
        }
      },
      "delete": {
        "summary": "DELETES a class by its _id",
        "description": "With deletion it",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS, the class was DELETED"
          },
          "404": {
            "description": "The selected class for DELETION was NOT FOUND"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the _id PARAMETER"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to DELETE the class"
          }
        }
      }
    },
    "/classes/user/{userId}": {
      "get": {
        "summary": "GETS classes by their user's _id",
        "description": "The selected classes are displayed.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS, GET Retrieved the selected classes"
          },
          "404": {
            "description": "The attempted GET of the selected classes was Not Found"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the _id PARAMETER"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to GET the selected classes"
          }
        }
      }
    },
    "/celebrations/user/{userId}": {
      "get": {
        "summary": "GETS all Private celebrations associated with a selected user _id",
        "description": "All Private celebrations associated with a selected user are displayed.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The MongoDB ObjectId for the associated USER under the 'user' label."
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS, GET returned all celebrations associated with the user"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "You are NOT AUTHORIZED to GET the celebrations"
          },
          "404": {
            "description": "The selected user associated with celebrations was NOT FOUND"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the USER _id PARAMETER"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to GET all celebrations associated with the user"
          }
        }
      }
    },
    "/celebrations/{celebrationId}": {
      "get": {
        "summary": "GETS the celebration belonging to a user by _id",
        "description": "The celebration is displayed.",
        "parameters": [
          {
            "name": "celebrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The MongoDB ObjectId for CELEBRATION under the '_id' label."
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS, GET returned the selected celebration belonging to the user"
          },
          "401": {
            "description": "You are NOT AUTHORIZED to GET this celebration"
          },
          "404": {
            "description": "The selected celebration was NOT FOUND"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the CELBRATION _id PARAMETER"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to GET the selected celebration"
          }
        }
      },
      "put": {
        "summary": "UPDATES a celebration that has been selected by id with the request body ---------- (!!!OAUTH PROTECTED ROUTE!!!)",
        "description": "The updated request body for the celebration changes the database.",
        "parameters": [
          {
            "name": "celebrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The MongoDB ObjectId for CELEBRATION under the '_id' label."
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "JWT token with Bearer prefix",
            "type": "string",
            "required": true,
            "default": "Bearer "
          },
          {
            "name": "body",
            "in": "body",
            "description": "Fields to update",
            "schema": {
              "type": "object",
              "properties": {
                "person": {
                  "type": "string",
                  "example": "Updated person"
                },
                "occasion": {
                  "type": "string",
                  "example": "Updated occasion"
                },
                "plan": {
                  "type": "string",
                  "example": "Updated plan"
                },
                "date": {
                  "type": "string",
                  "format": "date",
                  "example": "2024-12-31"
                },
                "location": {
                  "type": "string",
                  "example": "Updated location"
                },
                "othersInvolved": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Velma",
                    "Shaggy",
                    "Scooby"
                  ]
                },
                "visibility": {
                  "type": "string",
                  "enum": [
                    "Private",
                    "Public"
                  ],
                  "example": "Private"
                }
              },
              "required": [
                "person"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS, the celebration was DELETED"
          },
          "204": {
            "description": "SUCCESS, PUT updated the selected celebration in the database"
          },
          "401": {
            "description": "You are NOT AUTHORIZED to DELETE this celebration"
          },
          "404": {
            "description": "The selected celebration for DELETION was NOT FOUND"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the CELEBRATION _id PARAMETER"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to DELETE the celebration"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "DELETES a celebration by its _id ---------- (!!!OAUTH PROTECTED ROUTE!!!)",
        "description": "After deletion it returns a success code.",
        "parameters": [
          {
            "name": "celebrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The MongoDB ObjectId for CELEBRATION under the '_id' label."
          },
          {
            "name": "authorization",
            "in": "header",
            "description": "JWT token with Bearer prefix",
            "type": "string",
            "required": true,
            "default": "Bearer "
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS, the celebration was DELETED"
          },
          "401": {
            "description": "You are NOT AUTHORIZED to DELETE this celebration"
          },
          "404": {
            "description": "The selected celebration for DELETION was NOT FOUND"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the CELEBRATION _id PARAMETER"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to DELETE the celebration"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/celebrations": {
      "post": {
        "summary": "POSTS the data entered to create a new celebration ---------- (!!!OAUTH PROTECTED ROUTE!!!)",
        "description": "The request body for a new celebration is added to the database.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "JWT token with Bearer prefix",
            "type": "string",
            "required": true,
            "default": "Bearer "
          },
          {
            "name": "body",
            "in": "body",
            "description": "Fields to fill out.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "person": {
                  "type": "string",
                  "example": "New added person"
                },
                "occasion": {
                  "type": "string",
                  "example": "New added occasion"
                },
                "plan": {
                  "type": "string",
                  "example": "New added plan"
                },
                "user": {
                  "type": "string",
                  "example": "New added user (mongoose ObjectId for user labeled _id)"
                },
                "date": {
                  "type": "string",
                  "format": "date",
                  "example": "2024-12-24"
                },
                "location": {
                  "type": "string",
                  "example": "New added location"
                },
                "othersInvolved": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Bob",
                    "Shrily",
                    "George"
                  ]
                },
                "visibility": {
                  "type": "string",
                  "enum": [
                    "Private",
                    "Public"
                  ],
                  "example": "Public"
                }
              },
              "required": "person"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "SUCCESS, POST added a new celebration to the database"
          },
          "400": {
            "description": "There was a BAD REQUEST ERROR while trying to POST the form page for adding a celebration"
          },
          "401": {
            "description": "You are NOT AUTHORIZED to POST the new celebration"
          },
          "412": {
            "description": "The PRECONDITION FAILED in the validation of the celebration data"
          },
          "500": {
            "description": "There was an INTERNAL SERVER ERROR while trying to POST the request body for adding a celebration"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  }
}